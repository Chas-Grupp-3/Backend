{
  "openapi": "3.0.0",
  "info": {
    "title": "Mitt API",
    "version": "1.0.0",
    "description": "Automatiskt genererad dokumentation med Swagger och JSDoc"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "schemas": {
      "Package": {
        "type": "object",
        "properties": {
          "package_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "temperature": {
            "type": "number",
            "nullable": true
          },
          "humidity": {
            "type": "number",
            "nullable": true
          },
          "delivered": {
            "type": "boolean"
          },
          "receiver_id": {
            "type": "string",
            "nullable": true
          },
          "driver_id": {
            "type": "string",
            "nullable": true
          },
          "arrival_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "nullable": true
          },
          "sender": {
            "type": "string"
          },
          "thresholds": {
            "type": "array",
            "items": {},
            "nullable": true
          }
        },
        "required": [
          "package_id",
          "location",
          "sender"
        ]
      },
      "PackageInput": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "temperature": {
            "type": "number"
          },
          "sender": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "humidity": {
            "type": "number"
          },
          "delivered": {
            "type": "boolean"
          },
          "receiver_id": {
            "type": "string"
          },
          "driver_id": {
            "type": "string"
          },
          "arrival_date": {
            "type": "string",
            "format": "date-time"
          },
          "destination": {
            "type": "string"
          }
        },
        "required": [
          "location",
          "sender"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "driver",
              "user",
              "admin"
            ]
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "role"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Packages",
      "description": "Package management endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    }
  ],
  "paths": {
    "/login/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "name"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "user",
                      "driver"
                    ],
                    "default": "user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid role"
          },
          "409": {
            "description": "Email already registered"
          }
        }
      }
    },
    "/login/login": {
      "post": {
        "summary": "Login user",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/packages": {
      "get": {
        "summary": "Get all packages",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of packages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Package"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new package",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Package created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/packages/{id}": {
      "get": {
        "summary": "Get packages by user ID",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of packages for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Package"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No packages found for this user"
          }
        }
      },
      "put": {
        "summary": "Update a package",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Package ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a package",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Package deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          }
        }
      }
    },
    "/packages/package/{id}": {
      "get": {
        "summary": "Get a package by ID",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Package found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          }
        }
      }
    },
    "/packages/add/{id}": {
      "put": {
        "summary": "Assign a driver to a package",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Driver ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "package_id"
                ],
                "properties": {
                  "package_id": {
                    "type": "string",
                    "description": "Package ID to assign the driver to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver assigned to package"
          },
          "400": {
            "description": "Package already has an assigned driver or bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          }
        }
      }
    },
    "/packages/delivered/{id}": {
      "put": {
        "summary": "Mark a package as delivered",
        "tags": [
          "Packages"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Package ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Package marked as delivered"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Package not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "summary": "Create a new user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Email already exists"
          }
        }
      },
      "get": {
        "summary": "Get all users",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/location/{id}": {
      "put": {
        "summary": "Update a user's location",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Location object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  }
}